{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["api","options","method","headers","Accept","mode","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","planets","planetName","population","climate","terrain","featured","getAllPlanets","min","max","Math","floor","random","_this2","count","getRandom","fetch","concat","then","res","json","console","log","setState","name","films","length","_this3","data","getPlanet","_this4","_this$state","react_default","a","createElement","Fragment","className","onClick","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8OAIMA,eAAM,wBACNC,EAAU,CACdC,OAAQ,MACRC,QAAS,CACPC,OAAU,oBAEZC,KAAM,WAsFOC,cAjFb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXC,QAAS,EACTC,WAAY,GACZC,WAAY,GACZC,QAAS,GACTC,QAAS,GACTC,SAAU,GARAb,oFAaZG,KAAKW,kDAGGC,EAAKC,GACb,OAAOC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,IAAMA,sCAG3C,IAAAK,EAAAjB,KACNkB,EAAQlB,KAAKmB,UAAU,EAAGnB,KAAKI,MAAMC,SAEzCe,MAAK,GAAAC,OAAI/B,EAAJ,aAAA+B,OAAmBH,GAAS,CAAC3B,YACjC+B,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAC,GACJE,QAAQC,IAAIH,GACZN,EAAKU,SAAS,CACZrB,WAAYiB,EAAIK,KAChBrB,WAAYgB,EAAIhB,WAChBC,QAASe,EAAIf,QACbC,QAASc,EAAId,QACbC,SAAUa,EAAIM,MAAMC,mDAKV,IAAAC,EAAA/B,KACdoB,MAAK,GAAAC,OAAI/B,EAAJ,YAAmB,CAACC,YACxB+B,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAU,GACJD,EAAKJ,SAAS,CACZtB,QAAS2B,EAAKd,OACb,kBAAMa,EAAKE,iDAGT,IAAAC,EAAAlC,KAAAmC,EAOHnC,KAAKI,MALPE,EAFK6B,EAEL7B,WACAC,EAHK4B,EAGL5B,WACAC,EAJK2B,EAIL3B,QACAC,EALK0B,EAKL1B,QACAC,EANKyB,EAMLzB,SAGF,OACE0B,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACAH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACfJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBACbJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,SAASlC,IAEzB8B,EAAAC,EAAAC,cAAA,KAAGE,UAAU,cAAb,eAAAnB,OAA0Cd,IAC1C6B,EAAAC,EAAAC,cAAA,KAAGE,UAAU,WAAb,YAAAnB,OAAoCb,IACpC4B,EAAAC,EAAAC,cAAA,KAAGE,UAAU,WAAb,YAAAnB,OAAoCZ,IACpC2B,EAAAC,EAAAC,cAAA,KAAGE,UAAU,YAAb,+BAAAnB,OAAwDX,EAAxD,eAEA0B,EAAAC,EAAAC,cAAA,OAAKE,UAAU,oBACbJ,EAAAC,EAAAC,cAAA,UACEE,UAAU,sCACVC,QAAS,kBAAMP,EAAKD,cAFtB,UAKJG,EAAAC,EAAAC,cAAA,OAAKI,GAAG,UACRN,EAAAC,EAAAC,cAAA,OAAKI,GAAG,WACRN,EAAAC,EAAAC,cAAA,OAAKI,GAAG,mBA7EIC,aCDEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOd,EAAAC,EAAAC,cAACa,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,KAAK,SAAAmC,GACjCA,EAAaC","file":"static/js/main.ea365d27.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './styles/app.css';\nimport './styles/background.css';\n\nconst api = 'https://swapi.co/api';\nconst options = { \n  method: 'GET',\n  headers: {\n    'Accept': 'application/json'\n  },\n  mode: 'no-cors'\n}\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      planets: 0,\n      planetName: '',\n      population: '',\n      climate: '',\n      terrain: '',\n      featured: 0\n    };\n  }\n\n  componentWillMount() {\n    this.getAllPlanets()\n  }\n\n  getRandom(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  getPlanet() {\n    let count = this.getRandom(1, this.state.planets);\n\n    fetch(`${api}/planets/${count}`, {options})\n    .then(res => res.json())\n    .then(res => {\n      console.log(res)\n      this.setState({\n        planetName: res.name,\n        population: res.population,\n        climate: res.climate,\n        terrain: res.terrain,\n        featured: res.films.length\n      })\n    })\n  }\n\n  getAllPlanets() {\n    fetch(`${api}/planets`, {options})\n    .then(res => res.json())\n    .then(data => {\n      this.setState({\n        planets: data.count\n      }, () => this.getPlanet())\n    })\n  }\n  render() {\n    let {\n      planetName,\n      population,\n      climate,\n      terrain,\n      featured\n    } = this.state;\n\n    return (\n      <React.Fragment>\n      <div className=\"app\">\n        <div className=\"box\">\n        <div className=\"container-title\">\n          <h1 className=\"title\">{planetName}</h1>\n        </div>\n        <p className=\"population\">{`Population: ${population}`}</p>\n        <p className=\"climate\">{`Climate: ${climate}`}</p>\n        <p className=\"terrain\">{`Terrain: ${terrain}`}</p>\n        <p className=\"featured\">{`This planet was featured in ${featured} film(s) `}</p>\n        </div>\n        <div className=\"container-button\">\n          <button \n            className=\"action-button shadow animate yellow\" \n            onClick={() => this.getPlanet()}>NEXT</button>\n        </div>\n      </div>\n      <div id='stars'></div>\n      <div id='stars2'></div>\n      <div id='stars3'></div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}